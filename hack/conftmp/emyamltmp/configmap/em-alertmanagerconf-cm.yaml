
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanagerconf
  namespace: {{.NameSpace}}
data:
 config.yml: "global:\n  # The smarthost and SMTP sender used for mail notifications.\n  smtp_smarthost: 'localhost:25'\n  smtp_from: 'alertmanager@example.org'\n  smtp_auth_username: 'alertmanager'\n  smtp_auth_password: 'password'\n  # The auth token for Hipchat.\n  hipchat_auth_token: '1234556789'\n  # Alternative host for Hipchat.\n  hipchat_api_url: 'https://hipchat.foobar.org/'\n\n# The directory from which notification templates are read.\ntemplates: \n- '/etc/alertmanager/template/*.tmpl'\n\n# The root route on which each incoming alert enters.\nroute:\n  # The labels by which incoming alerts are grouped together. For example,\n  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would\n  # be batched into a single group.\n  group_by: ['alertname', 'cluster', 'service']\n\n  # When a new group of alerts is created by an incoming alert, wait at\n  # least 'group_wait' to send the initial notification.\n  # This way ensures that you get multiple alerts for the same group that start\n  # firing shortly after another are batched together on the first \n  # notification.\n  group_wait: 30s\n\n  # When the first notification was sent, wait 'group_interval' to send a batch\n  # of new alerts that started firing for that group.\n  group_interval: 5m\n\n  # If an alert has successfully been sent, wait 'repeat_interval' to\n  # resend them.\n  repeat_interval: 3h \n\n  # A default receiver\n  receiver: team-X-mails\n\n  # All the above attributes are inherited by all child routes and can \n  # overwritten on each.\n\n  # The child route trees.\n  routes:\n  # This routes performs a regular expression match on alert labels to\n  # catch alerts that are related to a list of services.\n  - match_re:\n      service: ^(foo1|foo2|baz)$\n    receiver: team-X-mails\n    # The service has a sub-route for critical alerts, any alerts\n    # that do not match, i.e. severity != critical, fall-back to the\n    # parent node and are sent to 'team-X-mails'\n    routes:\n    - match:\n        severity: critical\n      receiver: team-X-pager\n  - match:\n      service: files\n    receiver: team-Y-mails\n\n    routes:\n    - match:\n        severity: critical\n      receiver: team-Y-pager\n\n  # This route handles all alerts coming from a database service. If there's\n  # no team to handle it, it defaults to the DB team.\n  - match:\n      service: database\n    receiver: team-DB-pager\n    # Also group alerts by affected database.\n    group_by: [alertname, cluster, database]\n    routes:\n    - match:\n        owner: team-X\n      receiver: team-X-pager\n    - match:\n        owner: team-Y\n      receiver: team-Y-pager\n\n\n# Inhibition rules allow to mute a set of alerts given that another alert is\n# firing.\n# We use this to mute any warning-level notifications if the same alert is \n# already critical.\ninhibit_rules:\n- source_match:\n    severity: 'critical'\n  target_match:\n    severity: 'warning'\n  # Apply inhibition if the alertname is the same.\n  equal: ['alertname', 'cluster', 'service']\n\n\nreceivers:\n- name: 'team-X-mails'\n  email_configs:\n  - to: 'team-X+alerts@example.org'\n\n- name: 'team-X-pager'\n  email_configs:\n  - to: 'team-X+alerts-critical@example.org'\n  pagerduty_configs:\n  - service_key: <team-X-key>\n\n- name: 'team-Y-mails'\n  email_configs:\n  - to: 'team-Y+alerts@example.org'\n\n- name: 'team-Y-pager'\n  pagerduty_configs:\n  - service_key: <team-Y-key>\n\n- name: 'team-DB-pager'\n  pagerduty_configs:\n  - service_key: <team-DB-key>\n  \n- name: 'team-X-hipchat'\n  hipchat_configs:\n  - auth_token: <auth_token>\n    room_id: 85\n    message_format: html\n    notify: true\n- name: 'default'\n  webhook_configs:\n  - url: http://dingtalk:8060/dingtalk/dtstack/send\n"
