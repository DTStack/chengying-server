// Code generated by MockGen. DO NOT EDIT.
// Source: switch_record.go

// Package model is a generated GoMock package.
package model

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSwitchRecordI is a mock of SwitchRecordI interface.
type MockSwitchRecordI struct {
	ctrl     *gomock.Controller
	recorder *MockSwitchRecordIMockRecorder
}

// MockSwitchRecordIMockRecorder is the mock recorder for MockSwitchRecordI.
type MockSwitchRecordIMockRecorder struct {
	mock *MockSwitchRecordI
}

// NewMockSwitchRecordI creates a new mock instance.
func NewMockSwitchRecordI(ctrl *gomock.Controller) *MockSwitchRecordI {
	mock := &MockSwitchRecordI{ctrl: ctrl}
	mock.recorder = &MockSwitchRecordIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwitchRecordI) EXPECT() *MockSwitchRecordIMockRecorder {
	return m.recorder
}

// GetCurrentSwitchRecord mocks base method.
func (m *MockSwitchRecordI) GetCurrentSwitchRecord(clusterId int, productName, serviceName, switchName string) (*SwitchRecordInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSwitchRecord", clusterId, productName, serviceName, switchName)
	ret0, _ := ret[0].(*SwitchRecordInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSwitchRecord indicates an expected call of GetCurrentSwitchRecord.
func (mr *MockSwitchRecordIMockRecorder) GetCurrentSwitchRecord(clusterId, productName, serviceName, switchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSwitchRecord", reflect.TypeOf((*MockSwitchRecordI)(nil).GetCurrentSwitchRecord), clusterId, productName, serviceName, switchName)
}

// GetRecordById mocks base method.
func (m *MockSwitchRecordI) GetRecordById(id int) (*SwitchRecordInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordById", id)
	ret0, _ := ret[0].(*SwitchRecordInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordById indicates an expected call of GetRecordById.
func (mr *MockSwitchRecordIMockRecorder) GetRecordById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordById", reflect.TypeOf((*MockSwitchRecordI)(nil).GetRecordById), id)
}

// NewSwitchRecord mocks base method.
func (m *MockSwitchRecordI) NewSwitchRecord(name, switchType, productName, serviceName, status, StatusMessage string, clusterId, progress int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSwitchRecord", name, switchType, productName, serviceName, status, StatusMessage, clusterId, progress)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSwitchRecord indicates an expected call of NewSwitchRecord.
func (mr *MockSwitchRecordIMockRecorder) NewSwitchRecord(name, switchType, productName, serviceName, status, StatusMessage, clusterId, progress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSwitchRecord", reflect.TypeOf((*MockSwitchRecordI)(nil).NewSwitchRecord), name, switchType, productName, serviceName, status, StatusMessage, clusterId, progress)
}
